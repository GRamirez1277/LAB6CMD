package lab6cmd;

import java.io.File;
import java.time.LocalDate;
import java.time.LocalTime;

public class CMD extends javax.swing.JFrame {

    /**
     * Creates new form CMD
     */
    Comandos cmd;
    public CMD() {
        initComponents();
        cmd=new Comandos("");
        CMD.setText(cmd.getCurrentPath()+">");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CMD = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CMD.setBackground(new java.awt.Color(0, 0, 0));
        CMD.setColumns(20);
        CMD.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        CMD.setForeground(new java.awt.Color(255, 255, 255));
        CMD.setRows(5);
        CMD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CMDKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(CMD);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CMDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CMDKeyPressed
        int[] codProhibidos={27, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 19, 155, 127, 36, 33, 34, 35, 16, 38, 37, 40, 38, 39, 17, 18};
        
        for (int codigo:codProhibidos) {
            if (evt.getKeyCode()==codigo) return;        
        }
        
        if (evt.getKeyCode() == 8) {
            String nuevoText=CMD.getText();
            if (nuevoText.charAt(nuevoText.length()-1)=='>'){
            } else {
                nuevoText=nuevoText.substring(0, nuevoText.length()-1);
                CMD.setText(nuevoText);
            }
            
            return;

        } else if (evt.getKeyCode() == 10) {
            command();
            CMD.setText(CMD.getText()+"\n"+cmd.getCurrentPath()+">");
            return;
        }
        
        String nuevoText=CMD.getText();
        nuevoText+=evt.getKeyChar();
        CMD.setText(nuevoText);
    }//GEN-LAST:event_CMDKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CMD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CMD().setVisible(true);
            }
        });
    }
    
    private void print(String mensaje) {
        String nuevoText=CMD.getText();
        nuevoText+="\n"+mensaje;
        CMD.setText(nuevoText);
    }
    private String line() {
        String linea="",lineaInversa="",comando=CMD.getText();         
        for(int i=comando.length()-1;i>=0;i--){
            if (comando.charAt(i) == '>') break;
            lineaInversa+=comando.charAt(i);
        }
        for (int i=lineaInversa.length()-1;i>=0;i--){
            linea+=lineaInversa.charAt(i);
        }
        return linea;
    }
    
    private void command() {
        String linea=line();
        String[] args=linea.trim().split(" ");
        System.out.println(args.length);
        
        switch (args[0].toLowerCase()) {
            case "cd":
                System.out.println("Cd");
                if (args.length==1) {
                    print("Error: Debe ingresar un directorio para cambiar a ese.");
                    break;
                }
                cmd.Cd(args[1]);
                break;
                
            case "...":
                cmd.Cd("..");
                break;
                
            case "dir" :
                System.out.println("Dir");
                print(cmd.Dir(cmd.getCurrentPath()));
                break;
                
            case "mkdir":
                System.out.println("Mkdir");
                if(args.length==1){
                    print("Error: Debe ingresar un directorio para crear.");
                    break;
                }
                print(cmd.Mkdir(cmd.getCurrentPath()+"/"+args[1]));
                break;
                
            case "exit":
                System.exit(0);
                break;
                
            case "mfile":
                if (args.length == 1) {
                    print("Error: Debe ingresar el nombre del archivo.");
                    break;
                }
                print(cmd.Mfile(cmd.getCurrentPath()+"/"+args[1]));
                break;
                
            case "rm":
                if (args.length==1){
                    print("Error: Debe ingresar la carpeta o archivo que desea eliminar.");
                    break;
                }
                
                File destino=new File(cmd.getCurrentPath() + "/" + args[1]);
                print(cmd.Rm(destino));
                break;
            case "date":
                LocalDate date=LocalDate.now();
                print(date.toString());
                break;
                
            case "time":
                LocalTime time=LocalTime.now();
                print(time.toString());
                break;
                
            case "rd":
                if (args.length == 1) {
                    print("Error: Debe ingresar el archivo que desea leer.");
                    break;
                }
                
                print(cmd.rd(cmd.getCurrentPath() + "/" + args[1].trim()));
                break;
                
                
            case "wr":
                if (args.length < 3) {
                    print("Error: Debe escribir el archivo y contenido que desea escribir.");
                    break;
                }
                
                String mensaje = "";
                
                for (int i = 2; i<args.length;i++){
                    mensaje += args[i] + " ";
                }
                
                System.out.println(cmd.getCurrentPath() + "/" + args[1]);
                print(cmd.wr(mensaje, cmd.getCurrentPath() + "/" + args[1]));
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CMD;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
